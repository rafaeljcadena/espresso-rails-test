# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/api/v1/users' do
  let(:valid_attributes) { attributes_for(:statement_a) }
  let(:company_a) { create(:company_a) }
  let(:category_a) { create(:category_a, company: company_a) }
  let(:admin_a) { create(:admin_a, company: company_a) }
  let(:employee_a_first) { create(:employee_a_first, company: company_a) }
  let(:employee_a_second) { create(:employee_a_second, company: company_a) }
  let(:card_a) { create(:card_a, user: employee_a_first) }
  let(:statement_a) { create(:statement_a, card: card_a )}
  let(:admin_auth_token) { admin_a.create_new_auth_token }
  let(:employee_auth_token) { employee_a_first.create_new_auth_token }

  describe 'GET /index' do
    it 'not allowed for employees' do
      get api_v1_users_path
      expect(response).to have_http_status(:unauthorized), headers: employee_auth_token
    end

    it 'renders a unauthorized response for non-authenticated user' do
      employee_a_first

      get api_v1_users_path
      expect(response).to have_http_status(:unauthorized)
    end

    it 'renders a successful response for authenticated user' do
      employee_a_first

      get api_v1_users_path, headers: admin_auth_token
      expect(response).to have_http_status(:ok)
    end
  end

  describe 'POST /create_employee' do
    it 'not allowed for employees' do
      post create_employee_api_v1_users_path
      expect(response).to have_http_status(:unauthorized), headers: employee_auth_token
    end

    context 'with valid parameters' do
      it 'does create employees by admin' do
        employee_params = attributes_for(:employee_a_first)
        post create_employee_api_v1_users_path, 
              params: { user: employee_params }, 
              headers: admin_auth_token
        expect(response).to have_http_status(:created)
      end
    end

    context 'with invalid parameters' do
      it 'does not create employees by admin' do
        employee_params = attributes_for(:employee_a_first)
        employee_params.delete :email

        post create_employee_api_v1_users_path, 
              params: { user: employee_params }, 
              headers: admin_auth_token
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'POST /create_admin' do
    it 'allowed for public' do
      post create_admin_api_v1_users_path, params: { user: attributes_for(:admin_a) }
      expect(response).not_to have_http_status(:unauthorized)
    end

    context 'with valid parameters' do
      it 'does create admin' do
        admin_params = attributes_for(:admin_a)
        admin_params[:company_attributes] = attributes_for(:company_a)

        post create_admin_api_v1_users_path, 
              params: { user: admin_params }
        expect(response).to have_http_status(:created)
      end
    end

    context 'with invalid parameters' do
      it 'does not create employees by admin' do
        admin_params = attributes_for(:admin_a)
        admin_params[:company_attributes] = attributes_for(:company_a)
        admin_params.delete :email

        post create_admin_api_v1_users_path, 
              params: { user: admin_params }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update_employee' do
    context 'with valid parameters' do
      it 'does update employee' do
        employee_a_first
        new_email = 'new-email@employee.com'

        patch update_employee_api_v1_user_path(employee_a_first),
              params: { user: { email: new_email }}, 
              headers: admin_auth_token
        expect(response).to have_http_status(:ok)
      end
    end

    context 'with invalid parameters' do
      it 'does not update employee' do
        employee_a_first
        duplicated_email = employee_a_second.email

        patch update_employee_api_v1_user_path(employee_a_first),
              params: { user: { email: duplicated_email }}, 
              headers: admin_auth_token
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'not allowed for employees' do
      delete destroy_employee_api_v1_user_path(employee_a_second), headers: employee_auth_token
      expect(response).to have_http_status(:unauthorized)
    end

    it 'destroys the requested category' do
      delete destroy_employee_api_v1_user_path(employee_a_first), headers: admin_auth_token
      expect(response).to have_http_status(:no_content)
    end
  end
end
