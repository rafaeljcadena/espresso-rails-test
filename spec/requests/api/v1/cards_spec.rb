# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/cards' do
  let(:valid_attributes) { attributes_for(:card_a) }
  let(:company_a) { create(:company_a) }
  let(:admin_a) { create(:admin_a, company: company_a) }
  let(:admin_auth_token) { admin_a.create_new_auth_token }
  let(:employee_a_first) { create(:employee_a_first, company: company_a) }
  let(:employee_a_second) { create(:employee_a_second, company: company_a) }
  let(:employee_auth_token) { employee_a_first.create_new_auth_token }

  describe 'GET /index' do
    it 'not allowed for employees' do
      get api_v1_cards_path
      expect(response).to have_http_status(:unauthorized), headers: employee_auth_token
    end

    it 'renders a unauthorized response for non-authenticated user' do
      create(:card_a, user: admin_a)

      get api_v1_cards_path
      expect(response).to have_http_status(:unauthorized)
    end

    it 'renders a successful response for authenticated user' do
      create(:card_a, user: admin_a)

      get api_v1_cards_path, headers: admin_auth_token
      expect(response).to have_http_status(:success)
    end
  end

  describe 'POST /create' do
    it 'not allowed for employees' do
      email = employee_a_first.email

      post api_v1_cards_path, params: { card: valid_attributes.merge(email: email) }, headers: employee_auth_token
      expect(response).to have_http_status(:unauthorized)
    end

    context 'with valid parameters' do
      it 'creates a new Card' do
        expect do
          employee_with_company_a = create(:employee_a_first, company: admin_a.company)
          email = employee_with_company_a.email

          post api_v1_cards_path, params: { card: valid_attributes.merge(email: email) }, headers: admin_auth_token
        end.to change(Card, :count)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Card' do
        expect do
          employee_with_company_a = create(:employee_a_first, company: admin_a.company)
          email = nil

          post api_v1_cards_path, params: { card: valid_attributes.merge(email: email) }, headers: admin_auth_token
        end.not_to change(Card, :count)
      end
    end
  end

  describe 'PATCH /update' do
    it 'not allowed for employees' do
      card_a = create(:card_a)
      employee = card_a.user
      email = card_a.user.email

      patch api_v1_card_path(card_a), 
            params: { card: valid_attributes.merge(email: email) }, 
            headers: employee.create_new_auth_token
      expect(response).to have_http_status(:unauthorized)
    end

    context 'with valid parameters' do
      it 'updates the requested card' do
        card = create(:card_a, user: employee_a_first)
        other_email = employee_a_second.email

        patch api_v1_card_url(card), params: { card: { email: other_email } }, headers: admin_auth_token
        card.reload

        expect(card.user_id).to eq(employee_a_second.id)
      end
    end

    context 'with invalid parameters' do
      it "returns unprocessable entity status" do
        card = create(:card_a, user: employee_a_first)
        other_email = employee_a_second.email

        patch api_v1_card_url(card), params: { card: { email: nil } }, headers: admin_auth_token
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'not allowed for employees' do
      card = create(:card_a, user: employee_a_first)

      delete api_v1_card_url(card), headers: employee_auth_token
      expect(response).to have_http_status(:unauthorized)
    end

    it 'destroys the requested card' do
      card = create(:card_a, user: employee_a_first)
      expect do
        delete api_v1_card_url(card), headers: admin_auth_token
      end.to change(Card, :count)
    end
  end
end
